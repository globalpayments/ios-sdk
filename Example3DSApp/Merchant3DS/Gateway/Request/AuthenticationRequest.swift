import Foundation
import ThreeDS_SDK

/// The AuthenticationRequestModel class shall represent the parameters that are required for the
/// AuthenticationRequest to be successful.
struct AuthenticationRequest: Codable {
    ///   - cardExpiryDate: Card Expiry Date in YYMM String format.
    private let cardExpiryDate: String?
    ///   - acctNumber: Account number used in the authorisation request for payment transactions.
    private let acctNumber: String?
    ///   - cardholderName: Name of the Cardholder.
    private let cardholderName: String?
    ///   - deviceChannel: Type of the channel interface used to initiate the transaction.
    private let deviceChannel: String?
    ///   - deviceRenderOptions: Defines the SDK UI types which the device supports for displaying
    ///     a specific challenge within the SDK.
    private let deviceRenderOptions: DeviceRenderOptions?
    ///   - mcc: Merchant Category Code descrybing the Merchants type of business, product or service.
    private let mcc: String?
    ///   - merchantCountryCode: Country Code of the Merchant.
    private let merchantCountryCode: String?
    ///   - merchantName: Merchant name assigned by the Acquirer or Payment System.
    private let merchantName: String?
    ///   - messageCategory: The category of the message for a specific use case.
    private let messageCategory: String?
    ///   - messageType: Identifies the type of message that is passed.
    private let messageType: String?
     ///   - messageVersion: Protocol version identifier.
    private let messageVersion: String?
    ///   - purchaseAmount: Purchase amount in minor units of currency with al puctuation removed.
    private let purchaseAmount: String?
    ///   - purchaseCurrency: Currency in which purchase amount is expressed.
    private let purchaseCurrency: String?
    ///   - purchaseExponent: Minor units of currency as specified in the ISO 4217 currency exponent.
    private let purchaseExponent: String?
    ///   - purchaseDate: Date and time of the purchase, expressed in UTC.
    private let purchaseDate: String?
    ///   - sdkAppID: Universally unique ID created upon all installations and updates of the 3DS
    ///     Requestor app on a Consumer Device.
    private let sdkAppID: String?
    ///   - sdkMaxTimeout: Indicates maximum amount of time (in minutes) for all exchanges.
    private let sdkMaxTimeout: String?
    ///   - sdkEphemPubKey: Public key component of the ephemeral key pair generated by the 3DS SDK
    ///     used to establish session keys between the 3DS SDK and ACS.
    private let sdkEphemPubKey: SDKEphemPubKey?
    ///   - sdkReferenceNumber: Identifies the vendor and version for the 3DS SDK that is integrated
    ///     in a 3DS Requestor App, assigned by EMVCo when the 3DS SDK is approved.
    private let sdkReferenceNumber: String?
    ///   - sdkTransID: Universally unique transaction identifier assigned by the 3DS SDK to
    /// identify a single transaction.
    private let sdkTransID: String?
    ///   - sdkEncData: JWE Object containing data encrypted by the SDK for the DS to decrypt.
    private let sdkEncData: String?
    ///   - threeRIInd: Indicates the type of 3RI request.
    private let threeRIInd: String?
    
    // Fields used for delegated authentication
    ///   - threeDSReqAuthData: NokNok authenticated data.
    private let threeDSReqAuthData: String?
    ///   - threeDSRequestorChallengeInd: Challenge indicator
    private let threeDSRequestorChallengeInd: String?
    ///   - threeDSRequestorAuthenticationInd: Authentication indicator
    private let threeDSRequestorAuthenticationInd: String?
    ///   - threeDSReqAuthMethod: Mechanism used by the Cardholder to authenticate to the 3DS Requestor
    private let threeDSReqAuthMethod: String?
    ///   - threeDSReqAuthTimestamp: Date and time in UTC of the cardholder authentication (YYYYMMDDHHMM)
    private let threeDSReqAuthTimestamp: String?
    ///   - threeDSReqPriorAuthData: Authentication data received from FIDO authenticator registration
    private let threeDSReqPriorAuthData: String?
    ///   - threeDSReqPriorAuthMethod: 3-DS Requestor Prior Transaction Authentication Method
    private let threeDSReqPriorAuthMethod: String?
    ///   - threeDSReqPriorAuthTimestamp: Date and time in UTC of the prior ID&V authentication request (YYYYMMDDHHMM)
    private let threeDSReqPriorAuthTimestamp: String?
    ///   - threeDSReqPriorRef: Provides additional information to the ACS to determine the best approach for handling a request
    private let threeDSReqPriorRef: String?
    ///   - threeDSRequestorID: A unique 8-digit identifier assigned by Visa to identify each merchant brand business entity
    private let threeDSRequestorID: String?
    
    /// Init method for the AuthenticationRequestModel.
    init(cardExpiryDate: String? = nil,
         acctNumber: String? = nil,
         cardholderName: String? = nil,
         deviceChannel: String? = nil,
         deviceRenderOptions: DeviceRenderOptions? = nil,
         mcc: String? = nil,
         merchantCountryCode: String? = nil,
         merchantName: String? = nil,
         messageCategory: String? = nil,
         messageType: String? = nil,
         messageVersion: String? = nil,
         purchaseAmount: String? = nil,
         purchaseCurrency: String? = nil,
         purchaseExponent: String? = nil,
         purchaseDate: String? = nil,
         sdkAppID: String? = nil,
         sdkMaxTimeout: String? = nil,
         sdkEphemPubKey: SDKEphemPubKey? = nil,
         sdkReferenceNumber: String? = nil,
         sdkTransID: String? = nil,
         sdkEncData: String? = nil,
         threeRIInd: String? = nil,
         threeDSReqAuthData: String? = nil,
         threeDSRequestorChallengeInd: String? = nil,
         threeDSRequestorAuthenticationInd: String? = nil,
         threeDSReqAuthMethod: String? = nil,
         threeDSReqAuthTimestamp: String? = nil,
         threeDSReqPriorAuthData: String? = nil,
         threeDSReqPriorAuthMethod: String? = nil,
         threeDSReqPriorAuthTimestamp: String? = nil,
         threeDSReqPriorRef: String? = nil,
         threeDSRequestorID: String? = nil) {
        self.cardExpiryDate = cardExpiryDate
        self.acctNumber = acctNumber
        self.cardholderName = cardholderName
        self.deviceChannel = deviceChannel
        self.deviceRenderOptions = deviceRenderOptions
        self.mcc = mcc
        self.merchantCountryCode = merchantCountryCode
        self.merchantName = merchantName
        self.messageCategory = messageCategory
        self.messageType = messageType
        self.messageVersion = messageVersion
        self.purchaseAmount = purchaseAmount
        self.purchaseCurrency = purchaseCurrency
        self.purchaseExponent = purchaseExponent
        self.purchaseDate = purchaseDate
        self.sdkAppID = sdkAppID
        self.sdkMaxTimeout = sdkMaxTimeout
        self.sdkEphemPubKey = sdkEphemPubKey
        self.sdkReferenceNumber = sdkReferenceNumber
        self.sdkTransID = sdkTransID
        self.sdkEncData = sdkEncData
        self.threeRIInd = threeRIInd
        self.threeDSReqAuthData = threeDSReqAuthData
        self.threeDSRequestorChallengeInd = threeDSRequestorChallengeInd
        self.threeDSRequestorAuthenticationInd = threeDSRequestorAuthenticationInd
        self.threeDSReqAuthMethod = threeDSReqAuthMethod
        self.threeDSReqAuthTimestamp = threeDSReqAuthTimestamp
        self.threeDSReqPriorAuthData = threeDSReqPriorAuthData
        self.threeDSReqPriorAuthMethod = threeDSReqPriorAuthMethod
        self.threeDSReqPriorAuthTimestamp = threeDSReqPriorAuthTimestamp
        self.threeDSReqPriorRef = threeDSReqPriorRef
        self.threeDSRequestorID = threeDSRequestorID
    }
    
    /// Generates a JSON String representation of the class
    ///
    /// - Returns: JSON String representation of the class
    /// - Throws: SDK Runtime Error
    func JSONDictionary() throws -> [String : Any] {
        let encoder = JSONEncoder()
        let jsonData = try encoder.encode(self)
        let jsonDict = (try? JSONSerialization.jsonObject(with: jsonData)) as? [String: Any] ?? [:]
        return jsonDict
    }
}

/// Holds the parameters of the ephemeral key used in the AuthenticationRequest.
struct SDKEphemPubKey: Codable {
    let kty: String
    let crv: String
    let x: String
    let y: String
    
    /// Enum representation of the CodingKeys used for the JSON Encoding and Decoding of the
    /// sdkEphemPubKey.
    ///
    /// - kty: Key Type
    /// - crv: Type of curve used
    /// - x: The curve's X coordinate
    /// - y: The curve's Y coordinate
    private enum CodingKeys: String, CodingKey {
        case kty = "kty"
        case crv = "crv"
        case x = "x"
        case y = "y"
    }
}

/// Collects the needed parameters for the device render options and encodes them with the
/// Encodable protocol.
class DeviceRenderOptions: Codable {
    let sdkInterface: String
    let sdkUiType: [String]
    
    /// Init method for the deviceRenderOptions class.
    ///
    /// - Parameters:
    ///   - sdkInterface: Lists all of the SDK Interface types that the device supports for
    ///     displaying specific challenge user interfaces within the SDK.
    ///   - sdkUiType: Lists all UI types that the device supports for displaying specific challenge
    ///     user interfaces withing the SDK.
    init(sdkInterface: String, sdkUiType: [String]) {
        self.sdkInterface = sdkInterface
        self.sdkUiType = sdkUiType
    }
}
